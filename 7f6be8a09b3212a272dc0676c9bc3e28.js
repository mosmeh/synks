const MIN_FREQ=50;class Allpass{constructor(){this.eta=0,this._x1=this._y1=0}process(s){const t=this._x1+this.eta*(s-this._y1);return this._x1=s,this._y1=t,t}}class Delay{constructor(s){let t=1;for(;t<s;)t*=2;this._buf=new Float32Array(t),this._mask=t-1,this._readPtr=this._writePtr=0,this._allpass=new Allpass,this._out=0}set length(s){let t=this._writePtr-s+1;for(;t<0;)t+=this._buf.length;this._readPtr=t&this._mask;let i=1+this._readPtr-t;i<.5&&(this._readPtr=this._readPtr+1&this._mask,i+=1),this._allpass.eta=(1-i)/(1+i)}input(s){this._buf[this._writePtr]=s,this._readPtr=this._readPtr+1&this._mask,this._writePtr=this._writePtr+1&this._mask,this._out=this._allpass.process(this._buf[this._readPtr])}output(){return this._out}}class PositionFilter{constructor(){this._freq=50,this._position=0,this._delay=new Delay(sampleRate/50)}set freq(s){this._freq=s,this._delay.length=Math.floor(sampleRate*this._position/s)}set position(s){this._position=s,this._delay.length=Math.floor(sampleRate*s/this._freq)}process(s){return this._delay.input(s),s-this._delay.output()}}class DampingFilter{constructor(){this._freq=50,this._decay=3,this._x1=this._x2=0,this._brightness=.5,this._calcRho()}set freq(s){this._freq=s,this._calcRho()}set decay(s){this._decay=s,this._calcRho()}set brightness(s){this._brightness=s}process(s){const t=.5*(1+this._brightness),i=.25*(1-this._brightness),e=this._rho*(t*this._x1+i*(s+this._x2));return this._x2=this._x1,this._x1=s,e}_calcRho(){this._rho=Math.pow(.001,1/(this._freq*this._decay))}}class DynamicLevelFilter{constructor(){this._omega=50*Math.PI/sampleRate,this._l=this._l0=1,this._x1=this._y1=0}set freq(s){this._omega=Math.PI*s/sampleRate}set level(s){this._l=s,this._l0=s**(1/3)}process(s){const t=(this._omega*(s+this._x1)+(1-this._omega)*this._y1)/(1+this._omega);return this._x1=s,this._y1=t,this._l*this._l0*s+(1-this._l)*t}}class Voice{constructor(s){this.num=s,this._freq=50,this._duration=3*sampleRate,this._delay=new Delay(sampleRate/50),this._posFilter=new PositionFilter,this._dampFilter=new DampingFilter,this._dynFilter=new DynamicLevelFilter,this._i=1/0,this._amp=0}setParams({freq:s,brightness:t,decay:i,position:e}){this._freq=s,this._delay.length=sampleRate/s-1,this._posFilter.freq=s,this._dampFilter.freq=s,this._dynFilter.freq=s,this._duration=i*sampleRate,this._dampFilter.brightness=t,this._dampFilter.decay=i,this._posFilter.position=e}get playing(){return this._i<=this._duration}pluck(s){this._i=0,this._amp=s,this._dynFilter.level=.5*s}process(){let s=0;this._i++*this._freq<sampleRate&&(s=this._amp*(2*Math.random()-1)),s=this._posFilter.process(s);let t=this._delay.output();return s+=this._dampFilter.process(t),this._delay.input(s),t=this._dynFilter.process(t),t}}class Processor extends AudioWorkletProcessor{constructor(){super(),this._voices=[],this.port.onmessage=s=>{const{data:t}=s;switch(t.type){case"params":for(this._params=t.params;this._voices.length>this._params.voices;)this._voices.shift();return void this._voices.forEach((s=>{s.setParams({...this._params,freq:this._params.freqs[s.num]})}));case"pluck":const s=this._voices.findIndex((s=>s.num===t.which));if(s>=0){const[i]=this._voices.splice(s,1);return i.pluck(t.amp),void this._voices.push(i)}const i=new Voice(t.which);for(i.setParams({...this._params,freq:this._params.freqs[t.which]}),i.pluck(t.amp),this._voices.push(i);this._voices.length>this._params.voices;)this._voices.shift();return}}}process(s,t){const i=t[0][0];for(let s=0;s<i.length;++s)i[s]=this._voices.reduce(((s,t)=>s+t.process()),0);return this._voices=this._voices.filter((s=>s.playing)),!0}}registerProcessor("main",Processor);